// Online C++ compiler to run C++ program online
#include <bits/stdc++.h>
using namespace std;


vector<list<int>> graph;
unordered_set<int> visited;
vector<vector<int>> result;
int v;
void addedge(int s,int d,bool bi=true){
    graph[s].push_back(d);
    if(bi)
    {
        graph[d].push_back(s);
        
    }
}
// void dfs(int curr,int end,vector<int>& path)
// {
//     if(curr==end){
//     path.push_back(curr);
//     result.push_back(path);
//     path.pop_back();
//     }
    
//     visited.insert(curr);
//     path.push_back(curr);
//     for(auto neighbour: graph[curr])
//     {
//         if(!visited.count(neighbour))
//         {
//             dfs(neighbour,end,path);
//         }
//     }
//     path.pop_back();
//     visited.erase(curr);
//     return;
// }
// void  allpath(int start,int end)
// {
//  vector<int> path;
//  dfs(start,end,path);
// }
void bfs(int s,vector<int>& dest)
{
    queue<int> q;
    visited.clear();
    dest.resize(v,INT_MAX);
    dest[s]=0;
    visited.insert(s);
    q.push(s);
    while(!q.empty())
    {
        int curr=q.front();
        q.pop();
        cout<<curr<<" ";
        for(auto neighbour:graph[curr])
        {
            if(!visited.count(neighbour))
            {
            q.push(neighbour);
            visited.insert(neighbour);
            dest[neighbour]=dest[curr]+1;
            
        }
    }
    
}
cout<<endl;
}


int main() {
    cout<<"enter the no of vertrex :";
    cin>>v;
    graph.resize(v,list<int>());
    int e;
    cout<<"enter the value of edges : ";
    cin>>e;
    while(e--)
    {
        int s,d;
        cout<<"enter the value of s from  d ";
        cin>>s>>d;
        addedge(s,d);
    }
    int x,y;
    cout<<"enter the value of x";
    cin>>x;
    vector<int> dest;
    bfs(x,dest);
    for(int i=0;i<dest.size();i++)
    {
        cout<<dest[i]<<" ";
    }
    

    return 0;
}
